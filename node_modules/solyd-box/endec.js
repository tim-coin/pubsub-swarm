'use strict';
//Courtesy: https://gist.github.com/vlucas/2bd40f62d20c1d49237a109d491974eb
const crypto = require('crypto');

const ENCRYPTION_KEY = crypto.randomBytes(32) //process.env.ENCRYPTION_KEY; // Must be 256 bytes (32 characters)
const IV_LENGTH = 16; // For AES, this is always 16

function encrypt(text, key, iv) {
   //iv = crypto.randomBytes(IV_LENGTH);

    let cipher = crypto.createCipheriv('aes-256-cbc', new Buffer(key), iv).setAutoPadding(false); //new Buffer(iv, 'hex'));
    let encrypted = cipher.update(customPadding(text));
    //cipher.setAutoPadding(4)
    //console.log("BL: ", encrypted.length, encrypted.length%256)
    encrypted = Buffer.concat([encrypted,  Buffer(cipher.final(),'binary' ) ]);

    //  return iv.toString('hex') + ':' + encrypted.toString('hex');
    return encrypted.toString('hex')

}

function decrypt(text, key, iv) {
  //let textParts = text.split(':');
  //let iv = new Buffer(textParts.shift(), 'hex');
  //let encryptedText = new Buffer(textParts.join(':'), 'hex');

    let decipher = crypto.createDecipheriv('aes-256-cbc', key, iv); //   new Buffer(key)
    decipher.setAutoPadding(false) //24 or 1, false works
    let decrypted = decipher.update(text);

    decrypted = Buffer.concat([decrypted,  Buffer(decipher.final(),'binary' ) ]);

    return untag(decrypted).toString('utf8');

}

function untag(stbf){
  for(var i = stbf.length; i > 0; i--){

    if(stbf[i] == 0){
      //console.log(i, key3[i], key3[i], key3[i] == 0 )
      stbf = stbf.slice(0,i)
    }
  }
  return stbf
}

function customPadding(str) {
  str = new Buffer(str,"utf8").toString("hex");
  var OLeN = str.length
  var bitLength = str.length*8;

  if(bitLength < 256) {
    for(var i=bitLength;i<256;i+=8) {
      str += 0x0;
    }
  } else if(bitLength > 256) {
    while((str.length*8)%256 != 0) {
      str+= 0x0;
    //  console.log("NL: ", str.length, str )
    }
  }
  //console.log("STR LEN PAD: ", str.length, (str.length*8), OLeN )
  return new Buffer(str,"hex").toString("utf8");
}



module.exports = { decrypt, encrypt };
/*

var nonce = 'f0035943892b4536'
var key = '00af515c1ba76693ace074fb74fb74fb'
var enc = encrypt("EPCSD I love you! What is life? EPCSD I love you! What is life? EPCSD I love you! What is life? EPCSD I love you! What is life?",key, new Buffer(nonce) )
console.log(";;;>",enc )
console.log(";;;>",decrypt(enc,key, new Buffer(nonce) ).toString('utf8') )
*/
